/* auth {}: allow users to connect to the ircd (OLD I:) */
auth {
	/* user: the user@host allowed to connect.  multiple IPv4/IPv6 user
	 * lines are permitted per auth block. examples below using non-existent IPs (RFC5737)
	 */
	user="*@192.0.2.1";
	user="*@127.0.0.1";
	user="*@203.0.113.1";
	user="user@192.0.2.1";

	/* password: an optional password that is required to use this block.
	 * By default this is not encrypted, specify the flag "encrypted" in
	 * flags = ...; below if it is.
	 */

	/* spoof: fake the users user@host to be be this.  You may either
	 * specify a host or a user@host to spoof to.  This is free-form,
	 * just do everyone a favour and dont abuse it. (OLD I: = flag)
	 */
	spoof = "special.user";

	/* Possible flags in auth:
	 *
	 * encrypted                  | password is encrypted with mkpasswd
	 * spoof_notice               | give a notice when spoofing hosts
	 * exceed_limit (old > flag)  | allow user to exceed class user limits
	 * kline_exempt (old ^ flag)  | exempt this user from k/g/xlines
	 * gline_exempt (old _ flag)  | exempt this user from glines
	 * spambot_exempt             | exempt this user from spambot checks
	 * shide_exempt               | exempt this user from serverhiding
	 * jupe_exempt                | exempt this user from generating
	 *                              warnings joining juped channels
	 * resv_exempt                | exempt this user from resvs
	 * flood_exempt               | exempt this user from flood limits
	 *                                     USE WITH CAUTION.
	 * no_tilde     (old - flag)  | don't prefix ~ to username if no ident
	 * need_ident   (old + flag)  | require ident for user in this class
	 * restricted                 | prevent user from sending mode changes
	 */
	flags = kline_exempt, exceed_limit, gline_exempt, flood_exempt;

	/* class: the class the user is placed in */
	class = "opers";
};

auth {
    /* redirect: the server and port to redirect a user to.  A user does
     * not have to obey the redirection, the ircd just suggests to them
     * an alternative server.
     */
    user = "*@*";
    spoof = "anonymous.user";

    /* class: a class is required even though it is not used */
    class = "users";
};

